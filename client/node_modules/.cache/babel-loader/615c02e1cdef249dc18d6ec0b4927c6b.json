{"ast":null,"code":"import { GET_POSTS, GET_POST, GET_TOP_POSTS, GET_TAG_POSTS, POST_ERROR, DELETE_POST, ADD_POST } from '../types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n    case GET_TOP_POSTS:\n    case GET_TAG_POSTS:\n      return { ...state,\n        posts: action.payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: action.payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [action.payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/apple/my-projects/Stack-Overflow-Clone/client/src/redux/posts/posts.reducer.js"],"names":["GET_POSTS","GET_POST","GET_TOP_POSTS","GET_TAG_POSTS","POST_ERROR","DELETE_POST","ADD_POST","initialState","posts","post","loading","error","state","action","type","payload","filter","id"],"mappings":"AAAA,SACIA,SADJ,EAEIC,QAFJ,EAGIC,aAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,WANJ,EAOIC,QAPJ,QAQO,UARP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,SAAL;AACA,SAAKE,aAAL;AACA,SAAKC,aAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAFX;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKT,QAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHH,QAAAA,IAAI,EAAEI,MAAM,CAACE,OAFV;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKJ,QAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,KAAK,EAAE,CAAEK,MAAM,CAACE,OAAT,EAAmB,GAAGH,KAAK,CAACJ,KAA5B,CAFJ;AAGHE,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,EAAL,KAAYJ,MAAM,CAACE,OAA9C,CAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKN,UAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHD,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAFX;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ;AACI,aAAOE,KAAP;AAlCR;AAoCH","sourcesContent":["import {\n    GET_POSTS,\n    GET_POST,\n    GET_TOP_POSTS,\n    GET_TAG_POSTS,\n    POST_ERROR,\n    DELETE_POST,\n    ADD_POST\n} from '../types';\n\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_POSTS:\n        case GET_TOP_POSTS:\n        case GET_TAG_POSTS:\n            return {\n                ...state,\n                posts: action.payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n                ...state,\n                post: action.payload,\n                loading: false\n            };\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [ action.payload , ...state.posts],\n                loading: false\n            };\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post.id !== action.payload),\n                loading: false\n            };\n        case POST_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}