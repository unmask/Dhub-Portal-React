{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from '../alert/alert.actions';\nimport { GET_POSTS, GET_POST, GET_TOP_POSTS, GET_TAG_POSTS, POST_ERROR, DELETE_POST, ADD_POST } from '../types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //GET TOP POSTS\n\nexport const getTopPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts/top');\n    dispatch({\n      type: GET_TOP_POSTS,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //GET TAG POSTS\n\nexport const getTagPosts = tagName => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/tag/${tagName}`);\n    dispatch({\n      type: GET_TAG_POSTS,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/posts', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data.data\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n    dispatch(getPosts());\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/apple/my-projects/Stack-Overflow-Clone/client/src/redux/posts/posts.actions.js"],"names":["axios","setAlert","GET_POSTS","GET_POST","GET_TOP_POSTS","GET_TAG_POSTS","POST_ERROR","DELETE_POST","ADD_POST","getPosts","dispatch","res","get","type","payload","data","err","response","message","msg","statusText","status","getPost","id","getTopPosts","getTagPosts","tagName","addPost","formData","config","headers","post","deletePost","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from '../alert/alert.actions';\nimport {\n    GET_POSTS,\n    GET_POST,\n    GET_TOP_POSTS,\n    GET_TAG_POSTS,\n    POST_ERROR,\n    DELETE_POST,\n    ADD_POST\n} from '../types';\n\n// Get posts\nexport const getPosts = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/posts');\n\n        dispatch({\n            type: GET_POSTS,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Get post\nexport const getPost = id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/posts/${id}`);\n\n        dispatch({\n            type: GET_POST,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n//GET TOP POSTS\nexport const getTopPosts = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/posts/top');\n\n        dispatch({\n            type: GET_TOP_POSTS,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n//GET TAG POSTS\nexport const getTagPosts = tagName => async dispatch => {\n    try {\n        const res = await axios.get(`/api/posts/tag/${tagName}`);\n\n        dispatch({\n            type: GET_TAG_POSTS,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Add post\nexport const addPost = formData => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    try {\n        const res = await axios.post('/api/posts', formData, config);\n\n        dispatch({\n            type: ADD_POST,\n            payload: res.data.data\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n\n        dispatch(getPosts());\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Delete post\nexport const deletePost = id => async dispatch => {\n    try {\n        const res = await axios.delete(`/api/posts/${id}`);\n\n        dispatch({\n            type: DELETE_POST,\n            payload: id\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}