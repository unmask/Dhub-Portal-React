{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from '../../redux/alert/alert.actions';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from '../types';\nimport setAuthToken from './auth.utils'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  username,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.data\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = ({\n  username,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.data\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch(setAlert('User has logged out', 'success'));\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/apple/my-projects/Stack-Overflow-Clone/client/src/redux/auth/auth.actions.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","username","password","config","headers","body","JSON","stringify","post","message","response","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from '../../redux/alert/alert.actions';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT\n} from '../types';\n\nimport setAuthToken from './auth.utils';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token){\n        setAuthToken(localStorage.token);\n    }\n    try {\n        const res = await axios.get('/api/auth');\n\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        });\n    }\n};\n\n// Register User\nexport const register = ({ username, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ username, password });\n\n    try {\n        const res = await axios.post('/api/users', body, config);\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data.data\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n\n        dispatch(loadUser());\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n};\n\n// Login User\nexport const login = ({ username, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ username, password });\n\n    try {\n        const res = await axios.post('/api/auth', body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data.data\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n\n        dispatch(loadUser());\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n};\n\n//LOGOUT\nexport const logout = () => dispatch => {\n    dispatch(setAlert('User has logged out', 'success'));\n\n    dispatch({ type: LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}