{"ast":null,"code":"import { GET_ANSWERS, ANSWER_ERROR, ADD_ANSWER, DELETE_ANSWER } from '../types';\nconst initialState = {\n  answers: [],\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ANSWERS:\n      return { ...state,\n        answers: action.payload,\n        loading: false\n      };\n\n    case ADD_ANSWER:\n      return { ...state,\n        answers: [...state.answers, action.payload],\n        loading: false\n      };\n\n    case DELETE_ANSWER:\n      return { ...state,\n        answers: state.answers.filter(answer => answer.id !== action.payload),\n        loading: false\n      };\n\n    case ANSWER_ERROR:\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/apple/my-projects/Stack-Overflow-Clone/client/src/redux/answers/answers.reducer.js"],"names":["GET_ANSWERS","ANSWER_ERROR","ADD_ANSWER","DELETE_ANSWER","initialState","answers","loading","error","state","action","type","payload","filter","answer","id"],"mappings":"AAAA,SACIA,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,QAKO,UALP;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,OAAO,EAAE,IAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,WAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFH,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAFd;AAGFL,QAAAA,OAAO,EAAE;AAHP,OAAN;;AAKJ,SAAKJ,UAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHH,QAAAA,OAAO,EAAE,CAAG,GAAGG,KAAK,CAACH,OAAZ,EAAoBI,MAAM,CAACE,OAA3B,CAFN;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKH,aAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,CAAcO,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcL,MAAM,CAACE,OAApD,CAFN;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,YAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHD,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAFX;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ;AACI,aAAOE,KAAP;AA1BR;AA4BH","sourcesContent":["import {\n    GET_ANSWERS,\n    ANSWER_ERROR,\n    ADD_ANSWER,\n    DELETE_ANSWER\n} from '../types';\n\nconst initialState = {\n    answers: [],\n    loading: true,\n    error: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type){\n        case GET_ANSWERS:\n            return{\n                ...state,\n                answers: action.payload,\n                loading: false\n            };\n        case ADD_ANSWER:\n            return {\n                ...state,\n                answers: [  ...state.answers,action.payload ],\n                loading: false\n            };\n        case DELETE_ANSWER:\n            return {\n                ...state,\n                answers: state.answers.filter(answer => answer.id !== action.payload),\n                loading: false\n            };\n        case ANSWER_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}