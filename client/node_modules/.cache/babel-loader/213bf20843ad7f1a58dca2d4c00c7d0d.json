{"ast":null,"code":"import { GET_COMMENTS, COMMENT_ERROR, ADD_COMMENT, DELETE_COMMENT } from '../types';\nconst initialState = {\n  comments: [],\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_COMMENTS:\n      return { ...state,\n        comments: action.payload,\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        comments: [action.payload, ...state.comments],\n        loading: false\n      };\n\n    case DELETE_COMMENT:\n      return { ...state,\n        comments: state.comments.filter(answer => answer.id !== action.payload),\n        loading: false\n      };\n\n    case COMMENT_ERROR:\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/apple/my-projects/Stack-Overflow-Clone/client/src/redux/comments/comments.reducer.js"],"names":["GET_COMMENTS","COMMENT_ERROR","ADD_COMMENT","DELETE_COMMENT","initialState","comments","loading","error","state","action","type","payload","filter","answer","id"],"mappings":"AAAA,SACIA,YADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,cAJJ,QAKO,UALP;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,OAAO,EAAE,IAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,YAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAFf;AAGFL,QAAAA,OAAO,EAAE;AAHP,OAAN;;AAKJ,SAAKJ,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHH,QAAAA,QAAQ,EAAE,CAAEI,MAAM,CAACE,OAAT,EAAmB,GAAGH,KAAK,CAACH,QAA5B,CAFP;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKH,cAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeO,MAAf,CAAsBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcL,MAAM,CAACE,OAArD,CAFP;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHD,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAFX;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ;AACI,aAAOE,KAAP;AA1BR;AA4BH","sourcesContent":["import {\n    GET_COMMENTS,\n    COMMENT_ERROR,\n    ADD_COMMENT,\n    DELETE_COMMENT\n} from '../types';\n\nconst initialState = {\n    comments: [],\n    loading: true,\n    error: {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type){\n        case GET_COMMENTS:\n            return{\n                ...state,\n                comments: action.payload,\n                loading: false\n            };\n        case ADD_COMMENT:\n            return {\n                ...state,\n                comments: [ action.payload , ...state.comments],\n                loading: false\n            };\n        case DELETE_COMMENT:\n            return {\n                ...state,\n                comments: state.comments.filter(answer => answer.id !== action.payload),\n                loading: false\n            };\n        case COMMENT_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}